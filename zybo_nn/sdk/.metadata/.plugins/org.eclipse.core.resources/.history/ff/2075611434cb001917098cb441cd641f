/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "ps7_init.h"
#include <xil_io.h>
#include <xscugic.h>
#include "xparameters.h"

// Interrupt controller
XScuGic InterruptController;
static XScuGic_Config *GicConfig;
u32 global_frame_counter = 0;

void StartDMATransferMM2S(unsigned int dstAddress, unsigned int len);
void StartDMATransferS2MM(unsigned int dstAddress, unsigned int len);

void InterruptHandlerMM2S(void) {
        // if you have a device, which may produce several interrupts one after another, the first thing you should do is to disable interrupts, but axi dma is not this case.
        u32 tmpValue;

        xil_printf("MM2S Interrupt Acknowledged.\n\r");

        // clear interrupt. just perform write to bit no. 12 of MMS2_DMASR
        tmpValue = Xil_In32(XPAR_AXI_DMA_0_BASEADDR + 0x04);
        tmpValue = tmpValue | 0x1000;
        Xil_Out32(XPAR_AXI_DMA_0_BASEADDR + 0x04, tmpValue);

        ///////////////////////////////////////////////////////
        //
        // Data is in the DRAM! Do your processing Here!
        //
        ///////////////////////////////////////////////////////

        global_frame_counter++;
        if(global_frame_counter > 10000000) {
                xil_printf("Frame number: %d \n\r", global_frame_counter);
                return;
        }

        // initiate a new data transfer
        // StarDMATransfer(0xa000000 + 128 * global_frame_counter);
        //StartDMATransfer(0xa000000, 256);
}

void InterruptHandlerS2MM(void) {
        // if you have a device, which may produce several interrupts one after another, the first thing you should do is to disable interrupts, but axi dma is not this case.
        u32 tmpValue;

        xil_printf("S2MM Interrupt Acknowledged.\n\r");

        // clear interrupt. just perform write to bit no. 12 of S2MM_DMASR
        tmpValue = Xil_In32(XPAR_AXI_DMA_1_BASEADDR + 0x34);
        tmpValue = tmpValue | 0x1000;
        Xil_Out32(XPAR_AXI_DMA_1_BASEADDR + 0x34, tmpValue);

        ///////////////////////////////////////////////////////
        //
        // Data is in the DRAM! Do your processing Here!
        //
        ///////////////////////////////////////////////////////

        //global_frame_counter++;
        if(global_frame_counter > 10000000) {
                //xil_printf("Frame number: %d \n\r", global_frame_counter);
                return;
        }

        // initiate a new data transfer
        // StarDMATransfer(0xa000000 + 128 * global_frame_counter);
        //StartDMATransfer(0xa000000, 256);
}

int SetUpInterruptSystem(XScuGic *XScuGicInstancePtr) {
        Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT, (Xil_ExceptionHandler) XScuGic_InterruptHandler, XScuGicInstancePtr);
        Xil_ExceptionEnable();          // enable interrupts in ARM
        return XST_SUCCESS;
}

int InitializeInterruptSystem(deviceID) {
        int Status;

        GicConfig = XScuGic_LookupConfig(deviceID);
        if(NULL == GicConfig) {
                return XST_FAILURE;
        }

        Status = XScuGic_CfgInitialize(&InterruptController, GicConfig, GicConfig->CpuBaseAddress);
        if(Status != XST_SUCCESS) {
                return XST_FAILURE;
        }

        Status = SetUpInterruptSystem(&InterruptController);
        if(Status != XST_SUCCESS) {
                return XST_FAILURE;
        }

        // Connect MM2S interruptions
        Status = XScuGic_Connect(&InterruptController,
        				XPAR_FABRIC_AXI_DMA_0_MM2S_INTROUT_INTR,
						(Xil_ExceptionHandler)InterruptHandlerMM2S,
						NULL);
        if(Status != XST_SUCCESS) {
        	return XST_FAILURE;
        }

        // Connect S2MM interruption
        Status = XScuGic_Connect(&InterruptController,
        				XPAR_FABRIC_AXI_DMA_1_S2MM_INTROUT_INTR,
                        (Xil_ExceptionHandler)InterruptHandlerS2MM,
                        NULL);
        if(Status != XST_SUCCESS) {
                return XST_FAILURE;
        }

        XScuGic_Enable(&InterruptController, XPAR_FABRIC_AXI_DMA_0_MM2S_INTROUT_INTR);
        XScuGic_Enable(&InterruptController, XPAR_FABRIC_AXI_DMA_1_S2MM_INTROUT_INTR);

        return XST_SUCCESS;
}

///////////////////////////////////////////////////////
//
// Initialize the AXI DMA
//
///////////////////////////////////////////////////////
int InitializeAXIDma(void) {
        unsigned int tmpVal;

        // MM2S_DMACR.RS = 1
        tmpVal = Xil_In32(XPAR_AXI_DMA_0_BASEADDR + 0x00);
        tmpVal = tmpVal | 0x1001;                                               // dma unit enable, interrupt on complete enable.
        Xil_Out32(XPAR_AXI_DMA_0_BASEADDR + 0x00, tmpVal);
        tmpVal = Xil_In32(XPAR_AXI_DMA_0_BASEADDR + 0x00);
        xil_printf("Value for input dma control register: %x\n\r", tmpVal);

        // S2MM_DMACR.RS = 1
        tmpVal = Xil_In32(XPAR_AXI_DMA_1_BASEADDR + 0x30);
        tmpVal = tmpVal | 0x1001;                                               // dma unit enable, interrupt on complete enable.
        Xil_Out32(XPAR_AXI_DMA_1_BASEADDR + 0x30, tmpVal);
        tmpVal = Xil_In32(XPAR_AXI_DMA_1_BASEADDR + 0x30);
        xil_printf("Value for output dma control register: %x\n\r", tmpVal);

        return 0;
}

///////////////////////////////////////////////////////
//
// Start DMA Transfer
//
///////////////////////////////////////////////////////
void StartDMATransferMM2S(unsigned int dstAddress, unsigned int len) {
        // write destination address to MM2S_DMA register.
        Xil_Out32(XPAR_AXI_DMA_0_BASEADDR + 0x18, dstAddress);

        //write length to S2MM_LENGHT register
        Xil_Out32(XPAR_AXI_DMA_0_BASEADDR + 0x28, len);
}

void StartDMATransferS2MM(unsigned int dstAddress, unsigned int len) {
        // write destination address to S2MM_DMA register.
        Xil_Out32(XPAR_AXI_DMA_1_BASEADDR + 0x48, dstAddress);

        //write length to S2MM_LENGHT register
        Xil_Out32(XPAR_AXI_DMA_1_BASEADDR + 0x58, len);
}


int main()
{
    init_platform();

    // enable the pl
    ps7_post_config();

    // initialize dmas
    xil_printf("Initializing axi dma...\n\r");
    InitializeAXIDma();

    //set the interrupt system and interrupt handling
    //interrupt
    xil_printf("enabling the interrupt handling system...\n\r");
    InitializeInterruptSystem(XPAR_PS7_SCUGIC_0_DEVICE_ID);

    // start the first dma transfer
    xil_printf("Performing the first dma transfer... press a key to begin...\n\r");
    //getchar();
    // it is possible to malloc an address and use it as input

    int word = 0;
    // write to dma
    Xil_Out32(XPAR_PS7_DDR_0_S_AXI_BASEADDR + 0, 0xdeadbeef);
    StartDMATransferMM2S(XPAR_PS7_DDR_0_S_AXI_BASEADDR, 32);
    word = Xil_In32(XPAR_PS7_DDR_0_S_AXI_BASEADDR);

    // read from dma
    StartDMATransferS2MM(XPAR_PS7_DDR_0_S_AXI_BASEADDR + 100, 32);
    word = Xil_In32(XPAR_PS7_DDR_0_S_AXI_BASEADDR + 100);

    xil_printf("Word = 0x%08x\n\r", word);

    return 0;
}
